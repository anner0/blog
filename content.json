{"meta":{"title":"Yuuu","subtitle":"","description":"Yuuu's Blog","author":"Yuuu","url":"http://Yuuu-u.github.io","root":"/"},"pages":[{"title":"我们都有很好的未来","date":"2022-07-20T07:19:46.000Z","updated":"2022-07-25T08:48:08.987Z","comments":true,"path":"categories/index.html","permalink":"http://yuuu-u.github.io/categories/index.html","excerpt":"","text":""},{"title":"messageboard","date":"2022-07-21T06:48:02.000Z","updated":"2022-07-21T06:48:02.292Z","comments":true,"path":"messageboard/index.html","permalink":"http://yuuu-u.github.io/messageboard/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-07-20T07:20:03.000Z","updated":"2022-07-25T08:46:51.007Z","comments":true,"path":"tags/index.html","permalink":"http://yuuu-u.github.io/tags/index.html","excerpt":"","text":"yuuutags Yuuu"},{"title":"我的歌单","date":"2019-05-17T08:14:00.000Z","updated":"2022-07-26T00:26:34.983Z","comments":true,"path":"music/index.html","permalink":"http://yuuu-u.github.io/music/index.html","excerpt":"","text":"这是歌单介绍"}],"posts":[{"title":"YAML基本语法","slug":"基本操作","date":"2022-07-21T05:51:20.829Z","updated":"2022-07-21T07:38:39.662Z","comments":true,"path":"2022/07/21/基本操作/","link":"","permalink":"http://yuuu-u.github.io/2022/07/21/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","excerpt":"","text":"YAML基本语法1. 基本要求​ 大小写敏感 ​ 数据值前必须有空格作为分隔符 ​ 使用缩进表示层级关系 ​ 缩进不允许使用Tab键，只允许使用空格 ​ #表示注释 2. 数据格式​ 对象(map)：键值对集合 12person: name: zhangsan ​ 数组：一组按次序排序的值 123address: -beijing -shanghai ​ 纯量：单个不可再分的值 12msg1: &#x27;hello \\n world&#x27;#单引忽略转义字符msg2: &quot;hello \\n world&quot;#双引识别转义字符 3. 参数引用 123name: lisiperson: name: $&#123;name&#125;#引用上面定义的name值 4. Springboot配置​ 成员变量的名称与配置文件里的名称可不同，但配置文件键的名称要与表达式中的一样 5.注入方式​ 1)通过@Value 12@Value(&quot;$&#123;name1&#125;&quot;)private String name1; ​ 2)通过@Autowired ​ 通过env.getProperty来访问 12@Autowiredprivate Environment env; ​ 注入的快捷键Fn+Alt+Insert ​ 3)@ConfigurationProperites可以用来代替@Value @ConfigurationProperties 的基本用法非常简单:我们为每个要捕获的外部属性提供一个带有字段的类。请注意以下几点: 前缀定义了哪些外部属性将绑定到类的字段上 根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配 我们可以简单地用一个值初始化一个字段来定义一个默认值 类本身可以是包私有的 类的字段必须有公共 setter 方法 Person 123456789101112131415161718192021222324252627282930313233343536373839@Component@ConfigurationProperties(prefix = &quot;person&quot;)public class Person &#123; private String name; private int age; private String[] address ; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public String[] getAddress() &#123; return address; &#125; public void setAddress(String[] address) &#123; this.address = address; &#125; @Override public String toString() &#123; return &quot;Person&#123;&quot; + &quot;name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; + &quot;, age=&quot; + age + &#x27;&#125;&#x27;; &#125;&#125; HelloController 12345678910111213141516171819202122232425262728293031323334353637383940414243@RestControllerpublic class HelloController &#123; @Value(&quot;$&#123;name&#125;&quot;) private String name; @Value(&quot;$&#123;person.name&#125;&quot;) private String name2; @Value(&quot;$&#123;address[0]&#125;&quot;) private String address0;//注入对象 @Autowired private Environment env; @Autowired private Person person; @RequestMapping(&quot;/hello2&quot;) public String hello2()&#123; System.out.println(name); System.out.println(name2); System.out.println(address0); System.out.println(&quot;----------------------&quot;); //第二种注入方式，只需要注入一个对象 System.out.println(env.getProperty(&quot;person.name&quot;)); System.out.println(person); System.out.println(&quot;----------------------&quot;); String[] address = person.getAddress(); for (String s : address) &#123; System.out.println(s); &#125; return &quot;hello World&quot;; &#125; @RequestMapping(&quot;/hello&quot;) public String hello()&#123; return &quot;hello World&quot;; &#125;&#125; 6. profile​ 功能：在开发Spring boot应用时，一套程序会被安装到不同环境，可以通过激活不同的环境版本，实现动态配置切换 profile配置方式 多profile文件方式 application-dev.properties&#x2F;yml 开发环境 application-test.properties&#x2F;yml测试环境 application-pro.properties&#x2F;yml生产环境 yml多文档方式 得用—分隔开 123456789101112131415161718192021222324252627#通过yml来分成不同部分来进行多配置#用来激活spring: profiles: active: pro---server: port: 8081spring: config: activate: on-profile: dev---server: port: 8082spring: config: activate: on-profile: pro---server: port: 8083spring: config: activate: on-profile: test--- profile激活方式 配置文件 123#激活多properties文件#激活dev的文件spring.profiles.active=dev 虚拟机参数 进入配置里面找VM 1-Dspring.profiles.active=test 命令行参数 1java-jar xxx.jar --spring.profiles.active=dev 7.Springboot配置 内部配置加载顺序如下，高优先级会覆盖低优先级 file:.&#x2F;config&#x2F;:当前项目下的&#x2F;config目录下 file:.&#x2F;:当前项目根目录下 classpath:&#x2F;config&#x2F;:classoath的config目录 classpath:&#x2F;:classpath的根目录 8. 整合jdbc9.整合Junit 搭建springboot工程 引入starter-test依赖 编写测试类 添加测试相关注解 @RunWith(SpringRunner.class) @SpringBootTest(classes&#x3D;启动类.class) 编写测试方法 12345678910111213141516171819202122232425package com.zkjg.test;/** userServiceTest测试类* */import com.zkjg.springboottest.SpringbootTestApplication;import com.zkjg.springboottest.UserService;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTest(classes = SpringbootTestApplication.class)public class UserServiceTest &#123; @Autowired private UserService userService; @Test public void testAdd()&#123; userService.add(); &#125;&#125; 10.整合Redis 搭建Springboot工程 引入redis起步依赖 配置redis相关属性 注入RedisTemplate模板 编写测试方法 ​ 12345678910111213141516171819202122232425262728293031package com.zkjg.springboot_redis;import org.junit.jupiter.api.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.cache.CacheProperties;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestclass SpringbootRedisApplicationTests &#123; @Autowired(required = false) private RedisTemplate redisTemplate; @Test public void testSet()&#123; //存数据 redisTemplate.boundValueOps(&quot;name&quot;).set(&quot;zhangsan&quot;); &#125; @Test public void testGet()&#123; //获取数据 Object name=redisTemplate.boundValueOps(&quot;name&quot;).get(); System.out.println(name); &#125;&#125; 11.整合MyBatis 搭建Springboot工程 引入MyBatis起步依赖，添加mysql驱动 编写DataSource和MyBatis相关配置 定义表和实体类 编写dao和mapper文件&#x2F;纯注解开发 测试 application.yml 12345678910#datasourcespring: datasource: username: root password: ych021029 url: jdbc:mysql://localhost:3306/data?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8 driver-class-name: com.mysql.cj.jdbc.Driver# config-location: 指定核心配置文件 UserMapper.java(接口) 1234567891011121314151617181920package com.zkjg.springbootmybatis.mapper;import com.zkjg.springbootmybatis.domain.User;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Select;import org.springframework.stereotype.Repository;import java.util.List;/** * @author Yuuu */@Mapper@Repositorypublic interface UserMapper &#123; @Select(&quot;select * from demo&quot;) public List&lt;User&gt; findAll();&#125; 测试类 12345678910111213141516171819202122232425262728293031323334353637383940package com.zkjg.springbootmybatis;import com.zkjg.springbootmybatis.domain.User;import com.zkjg.springbootmybatis.mapper.UserMapper;import org.junit.jupiter.api.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestclass SpringbootMybatisApplicationTests &#123; @Autowired private UserMapper userMapper; @Autowired private UserMapper userXmlMapper; @Test public void testFindAll()&#123; List&lt;User&gt; list = userMapper.findAll(); System.out.println(list); &#125; @Test public void testFindAll2()&#123; List&lt;User&gt; list = userXmlMapper.findAll(); System.out.println(list); &#125; @Test void contextLoads() &#123; &#125;&#125; User.java 123456789101112131415161718192021222324252627282930package com.zkjg.springbootmybatis.domain;public class User &#123; private int id; private String name; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; @Override public String toString() &#123; return &quot;User&#123;&quot; + &quot;id=&quot; + id + &quot;, name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125;&#125; UserMapper.xml 1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.zkjg.springbootmybatis.mapper.UserXmlMapper&quot;&gt; &lt;select id=&quot;finAll&quot; resultType=&quot;user&quot;&gt; select * from demo &lt;/select&gt;&lt;/mapper&gt;","categories":[],"tags":[]},{"title":"Springboot+vue遇到的问题","slug":"Springboot+Vue遇到的问题","date":"2022-07-21T05:51:20.826Z","updated":"2022-07-21T07:38:27.937Z","comments":true,"path":"2022/07/21/Springboot+Vue遇到的问题/","link":"","permalink":"http://yuuu-u.github.io/2022/07/21/Springboot+Vue%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"","text":"Springboot+Vue遇到的问题1.创建Springboot启动application报错1ERROR17200[main]o.s.b.d.LoggingFailureAnalysisReporter : 解决方法：在Application类上增加 1@SpringBootApplication(exclude =&#123;DataSourceAutoConfiguration.class&#125;)","categories":[],"tags":[]},{"title":"Spring","slug":"spring","date":"2022-07-21T05:51:20.711Z","updated":"2022-07-21T07:38:11.377Z","comments":true,"path":"2022/07/21/spring/","link":"","permalink":"http://yuuu-u.github.io/2022/07/21/spring/","excerpt":"","text":"springspring开发步骤 导入spring开发基本包坐标 编写Dao接口实现类 Bean 创建Spring核心配置文件 applicationContext.xml 在Spring配置文件中配置UserDaoImpl 使用Spring的API获得Bean实例 Bean标签基本配置基本属性 **id:**Bean实例在Spring容器中的唯一标识 **class:**Bean的全限定名称 （全限定名&#x3D;包名+类型） Bean的标签范围配置 singleton 实例化1个 在Spring核心文件被加载时，实例化配置的Bean实例 对象创建在应用加载创建容器时，对象就被创建，只要容器在，对象就一直在，当应用卸载销毁容器时，对象被销毁 protorype 实例化多个 当调用getBean()方法实例化Bean时 使用对象时，创建新的对象实例，只要对象在使用时，就一直在，当对象长时间不用时，被Java的垃圾回收器回收了 Bean生命周期配置 **init-method:**指定类中的初始化方法名称 **destroy-method:**指定类中销毁方法名称 1init-method=&quot;init&quot; destroy-method=&quot;destory&quot; 通过close来关闭 123456public void test1()&#123; AbstractApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;); UserDao userDao1 = (UserDao) app.getBean(&quot;userDao&quot;); System.out.println(userDao1); app.close();&#125; Bean实例化三种方式 无参构造方法实例化： 工厂静态方法实例化：通过工厂 12345678910111213package com.yuuu.factory;import com.yuuu.dao.UserDao;import com.yuuu.dao.impl.UserDaoImpl;/** * @author Yuuu */public class StaticFactory &#123; public static UserDao getUserDao()&#123; return new UserDaoImpl(); &#125;&#125; 1&lt;bean id=&quot;userDao&quot; class=&quot;com.yuuu.factory.StaticFactory&quot; factory-method=&quot;getUserDao&quot;&gt;&lt;/bean&gt; 工厂实例方法实例化： 12345678910package com.yuuu.factory;import com.yuuu.dao.UserDao;import com.yuuu.dao.impl.UserDaoImpl;public class DynamicFactory &#123; public UserDao getUserDao()&#123; return new UserDaoImpl(); &#125;&#125; 12&lt;!--工厂实例方法实例化 &lt;bean id=&quot;factory&quot; class=&quot;com.yuuu.factory.DynamicFactory&quot; &gt;&lt;/bean&gt;--&gt;&lt;!-- &lt;bean id=&quot;userDao&quot; factory-bean=&quot;factory&quot; factory-method=&quot;getUserDao&quot;&gt;&lt;/bean&gt;--&gt; Bean依赖注入 将UserDao注入UserService内部 构造方法 12345678910111213141516import com.yuuu.dao.UserDao;import com.yuuu.service.UserService;public class UserServiceImpl implements UserService &#123; private UserDao userDao; public void setUserDao(UserDao userDao) &#123; this.userDao = userDao; &#125; @Override public void save() &#123; userDao.save(); &#125;&#125; set方法 ​ xml文件中 123xmlns:p=&quot;http://ww.springframework.org/schema/p&quot;&lt;bean id=&quot;userService&quot; class=&quot;com.yuuu...UserServiceImpl&quot; p:userDao-ref=&quot;userDao&quot;/&gt; Spring相关APIClassPathXmlApplicationContext 从类的根路径下加载配置文件推荐使用此 FileSystemXmlAppliactionContext 从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置 XML所在的绝对路径 1// ApplicationContext app = new FileSystemXmlApplicationContext(&quot;D:\\\\Workspace\\\\JAVA\\\\Spring\\\\src\\\\main\\\\resources\\\\applicationContext.xml&quot;); AnnotationConfigApplicationContext 使用注解的 getBean()的使用 某一个类型的Bean只存在一个使用此方法，否则使用id的方式 1UserService userService = app.getBean(&quot;userservice.class&quot;); 数据源 数据源是为了提高程序性能出现的 先实例化对象，初始化部分连接资源 归还资源","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-07-20T01:54:56.128Z","updated":"2022-07-20T01:54:56.128Z","comments":true,"path":"2022/07/20/hello-world/","link":"","permalink":"http://yuuu-u.github.io/2022/07/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}